-- =====================================
-- Setup: Create Supporting Tables
-- =====================================

-- 1. Customers Table (with LastModified)

CREATE TABLE Customers (
  CustomerId NUMBER PRIMARY KEY,
  CustomerName VARCHAR2(50),
  Email VARCHAR2(100),
  LastModified DATE
);

-- Sample Data
INSERT INTO Customers VALUES (1, 'Alice', 'alice@example.com', SYSDATE);

-- 2. Transactions Table

CREATE TABLE Transactions (
  TransactionId NUMBER PRIMARY KEY,
  AccountId NUMBER,
  Amount NUMBER,
  Type VARCHAR2(10), -- 'deposit' or 'withdrawal'
  TransactionDate DATE DEFAULT SYSDATE
);

-- 3. Accounts Table

CREATE TABLE Accounts (
  AccountId NUMBER PRIMARY KEY,
  Balance NUMBER
);

-- Sample Accounts
INSERT INTO Accounts VALUES (101, 1000);
INSERT INTO Accounts VALUES (102, 200);

-- 4. AuditLog Table

CREATE TABLE AuditLog (
  AuditId NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  TransactionId NUMBER,
  AuditTime TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- =====================================
-- Scenario 1: Trigger - UpdateCustomerLastModified
-- =====================================
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
  :NEW.LastModified := SYSDATE;
END;
/

-- =====================================
-- Scenario 2: Trigger - LogTransaction
-- =====================================
CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
  INSERT INTO AuditLog (TransactionId)
  VALUES (:NEW.TransactionId);
END;
/

-- =====================================
-- Scenario 3: Trigger - CheckTransactionRules
-- =====================================
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
  current_balance NUMBER;
BEGIN
  -- Get current balance
  SELECT Balance INTO current_balance FROM Accounts WHERE AccountId = :NEW.AccountId;

  IF :NEW.Type = 'withdrawal' THEN
    IF :NEW.Amount > current_balance THEN
      RAISE_APPLICATION_ERROR(-20001, 'Withdrawal exceeds account balance');
    END IF;
  ELSIF :NEW.Type = 'deposit' THEN
    IF :NEW.Amount <= 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive');
    END IF;
  ELSE
    RAISE_APPLICATION_ERROR(-20003, 'Invalid transaction type');
  END IF;
END;
/

-- =====================================
-- Test: Scenario 1 - Update Customer
-- =====================================
UPDATE Customers SET CustomerName = 'Alice Smith' WHERE CustomerId = 1;

-- =====================================
-- Test: Scenario 2 and 3 - Insert Transactions
-- =====================================

-- Valid deposit
INSERT INTO Transactions VALUES (1, 101, 500, 'deposit', SYSDATE);

-- Invalid withdrawal (should raise error)
-- Uncomment to test in Live SQL or OneCompiler
-- INSERT INTO Transactions VALUES (2, 102, 500, 'withdrawal', SYSDATE);

-- Valid withdrawal
INSERT INTO Transactions VALUES (3, 101, 200, 'withdrawal', SYSDATE);

-- View updated Customers
SELECT * FROM Customers;

-- View Audit Log
SELECT * FROM AuditLog;

-- View Transactions
SELECT * FROM Transactions;
